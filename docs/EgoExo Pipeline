# Using GraVi-T with egoexo

Short project description goes here.

## Table of Contents

- [Installation](#installation)
- [Usage](#usage)
- [Contributing](#contributing)
- [License](#license)

## Installation

1. Generate splits: `python /home/juro4948/gravit/data/egoexo4d/generate_splits.py`
2. Run util_scratchwork to set up symlinks in /home/juro4948/gravit/GraVi-T/data/features. All samples in the train/validation groups should be placed in the corresponding split folder. The bundle files will inform the program which samples are in train vs. validation.
3. Generate the Pytorch-geometric graphs: 
    -    For aria single-view: `python data/generate_temporal_graphs.py --features egoexo-omnivore-aria --tauf 10 --dataset egoexo-omnivore-aria`
    - For GoPro:
        -    Multi-view: `python data/generate_temporal_graphs.py --features egoexo-omnivore-gopro --tauf 10 --dataset egoexo-omnivore-aria --is_multiview True`
    - At the moment, the code for egoexo-omnivore assumes that both the features and labels are at 30FPS. All EgoExo Omnivore features are at 30 FPS (even the GoPro streams) but the labels are generated by the preprocess.ipynb notebook. Currently I have it set to 30 FPS but if you are unsure then double check. 


RuntimeError: mat1 and mat2 shapes cannot be multiplied (647x1536 and 768x64)


## Usage

Instructions on how to use the project and any relevant examples.

## Contributing

Guidelines for contributing to the project and how to submit pull requests.

## License

Information about the project's license and any additional terms.
